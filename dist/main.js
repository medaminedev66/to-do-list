(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(15),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-shadow: none;\r\n  font-family: sans-serif;\r\n}\r\n\r\n.to-do-list {\r\n  border: 1px solid slategray;\r\n  box-shadow: 0 0 2px;\r\n  max-width: 500px;\r\n  margin: auto;\r\n  margin-top: 5%;\r\n}\r\n\r\nh2 {\r\n  margin: 0.5rem;\r\n  font-size: large;\r\n  color: rgb(70, 70, 70);\r\n}\r\n\r\n.listContainer {\r\n  display: flex;\r\n  background-color: rgb(238, 238, 238);\r\n  height: 3rem;\r\n  align-items: center;\r\n  margin-bottom: 0.2rem;\r\n  padding-left: 0.5rem;\r\n  justify-content: left;\r\n  position: relative;\r\n  color: rgb(31, 31, 31);\r\n}\r\n\r\n.listContainer p {\r\n  padding-left: 0.5rem;\r\n}\r\n\r\n.input-text {\r\n  font-size: medium;\r\n  padding-left: 0.5rem;\r\n  width: 100%;\r\n  height: 2rem;\r\n  border-radius: 0;\r\n  border: none;\r\n  color: rgb(31, 31, 31);\r\n}\r\n\r\n.input-text:focus {\r\n  outline: none;\r\n}\r\n\r\n.done {\r\n  text-decoration: line-through;\r\n  color: slategray;\r\n}\r\n\r\n.invisible {\r\n  display: none;\r\n}\r\n\r\ni {\r\n  color: rgb(70, 70, 70);\r\n}\r\n\r\n.fa-trash-alt {\r\n  position: absolute;\r\n  right: 0.5rem;\r\n  transition: width 2s;\r\n}\r\n\r\n.fa-trash-alt:hover {\r\n  transform: scale(1.3);\r\n}\r\n\r\n.fa-plus-square:hover {\r\n  transform: scale(1.3);\r\n}\r\n\r\n.write-task {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 0.5rem 0 0.5rem;\r\n}\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,2BAA2B;EAC3B,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,oCAAoC;EACpC,YAAY;EACZ,mBAAmB;EACnB,qBAAqB;EACrB,oBAAoB;EACpB,qBAAqB;EACrB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,iBAAiB;EACjB,oBAAoB;EACpB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,0BAA0B;AAC5B",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-shadow: none;\r\n  font-family: sans-serif;\r\n}\r\n\r\n.to-do-list {\r\n  border: 1px solid slategray;\r\n  box-shadow: 0 0 2px;\r\n  max-width: 500px;\r\n  margin: auto;\r\n  margin-top: 5%;\r\n}\r\n\r\nh2 {\r\n  margin: 0.5rem;\r\n  font-size: large;\r\n  color: rgb(70, 70, 70);\r\n}\r\n\r\n.listContainer {\r\n  display: flex;\r\n  background-color: rgb(238, 238, 238);\r\n  height: 3rem;\r\n  align-items: center;\r\n  margin-bottom: 0.2rem;\r\n  padding-left: 0.5rem;\r\n  justify-content: left;\r\n  position: relative;\r\n  color: rgb(31, 31, 31);\r\n}\r\n\r\n.listContainer p {\r\n  padding-left: 0.5rem;\r\n}\r\n\r\n.input-text {\r\n  font-size: medium;\r\n  padding-left: 0.5rem;\r\n  width: 100%;\r\n  height: 2rem;\r\n  border-radius: 0;\r\n  border: none;\r\n  color: rgb(31, 31, 31);\r\n}\r\n\r\n.input-text:focus {\r\n  outline: none;\r\n}\r\n\r\n.done {\r\n  text-decoration: line-through;\r\n  color: slategray;\r\n}\r\n\r\n.invisible {\r\n  display: none;\r\n}\r\n\r\ni {\r\n  color: rgb(70, 70, 70);\r\n}\r\n\r\n.fa-trash-alt {\r\n  position: absolute;\r\n  right: 0.5rem;\r\n  transition: width 2s;\r\n}\r\n\r\n.fa-trash-alt:hover {\r\n  transform: scale(1.3);\r\n}\r\n\r\n.fa-plus-square:hover {\r\n  transform: scale(1.3);\r\n}\r\n\r\n.write-task {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 0.5rem 0 0.5rem;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&o[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),r.push(l))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var t,o,a=[],i=!0,s=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(a.push(t.value),!r||a.length!==r);i=!0);}catch(n){s=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(s)throw o}}return a}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),A=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(A).concat([c]).join("\n")}return[a].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=t.base?l[0]+t.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var u=e(d),f={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(r[u].references++,r[u].updater(f)):r.push({identifier:d,updater:o(f,t),references:1}),i.push(d)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);r[s].references--}for(var l=t(n,o),c=0;c<a.length;c++){var A=e(a[c]);0===r[A].references&&(r[A].updater(),r.splice(A,1))}a=l}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t=e.css,o=e.media,a=e.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n=e(379),r=e.n(n),t=e(795),o=e.n(t),a=e(569),i=e.n(a),s=e(565),l=e.n(s),c=e(216),A=e.n(c),d=e(589),u=e.n(d),f=e(426),m={};m.styleTagTransform=u(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),r()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;class p{constructor(n,r,e){this.description=n,this.completed=r,this.index=e}}let g=[];null==localStorage.getItem("list")&&localStorage.setItem("list",JSON.stringify([])),null!=localStorage.getItem("list")&&(g=JSON.parse(localStorage.getItem("list")));const h=n=>{const r=document.createElement("div");r.className="listContainer";const e=document.createElement("p"),t=document.createElement("input"),o=document.createElement("i");o.className="fas fa-trash-alt",o.classList.add("invisible"),document.querySelector(".the-list").appendChild(r),t.type="checkbox",t.name="checkbox",o.addEventListener("click",(r=>{(n=>{const r=JSON.parse(localStorage.getItem("list")).filter((r=>r.index!==n));if(r.length>0){let n=1;r.forEach((r=>{r.index=n,n+=1}))}localStorage.setItem("list",JSON.stringify(r))})(n.index),r.target.parentNode.remove()})),!0===n.completed?(t.checked=!0,e.classList.add("done")):(t.checked=!1,e.classList.remove("done")),t.addEventListener("change",(r=>{!function(n,r,e){r.target.checked?(n.completed=!0,e.classList.add("done")):(n.completed=!1,e.classList.remove("done"))}(n,r,e),localStorage.setItem("list",JSON.stringify(g))})),r.appendChild(t),r.appendChild(e),r.appendChild(o),r.addEventListener("mouseenter",(()=>{o.classList.remove("invisible")})),r.addEventListener("mouseleave",(()=>{setTimeout((()=>{o.classList.add("invisible")}),100)})),e.innerText=n.description};(()=>{if(g.length>=2){let n=g[0].index;for(let r=1;r<g.length;r+=1)if(g[r].index>n)n=g[r].index;else{const n=g[r];g[r]=g[r-1],g[r-1]=n}}})(),g.forEach((n=>{h(n)}));const E=()=>{null==localStorage.getItem("list")&&localStorage.setItem("list",JSON.stringify([])),g=JSON.parse(localStorage.getItem("list"));const n=document.querySelector(".input-text").value;let r;r=g.length>0?g[g.length-1].index+1:1;const e=((n,r,e)=>{const t=new p(n,!1,e),o=JSON.parse(localStorage.getItem("list"));return o.push(t),localStorage.setItem("list",JSON.stringify(o)),t})(n,0,r);h(e),document.querySelector(".input-text").value=""};document.querySelector(".fa-plus-square").addEventListener("click",(()=>{E()})),document.querySelector(".input-text").addEventListener("keyup",(n=>{13===n.keyCode&&E()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,